name: "CodeQL"

on:
  push:
    branches: [ 'main' ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ 'main' ]
  schedule:
    - cron: '7 2 * * 3'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ] #, 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    container:
      image: nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04
      env:
        DEBIAN_FRONTEND: noninteractive
        CUDA_VERSION: 11.8.0
        OS_VERSION: 20.04
        TRT_VERSION: 8.5.1.7
        TRT_OSSPATH: /__w/TensorRT/TensorRT
        TRT_LIBPATH: /usr/lib/x86_64-linux-gnu

    steps:
    - name: Update CUDA signing key
      run: apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub

    - name: Install required libraries
      run: |-
        apt-get update && apt-get install -y software-properties-common
        add-apt-repository ppa:ubuntu-toolchain-r/test
        apt-get update && apt-get install -y --no-install-recommends libcurl4-openssl-dev wget git pkg-config sudo ssh libssl-dev pbzip2 pv bzip2 unzip devscripts lintian fakeroot dh-make build-essential

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install python3
      run: |-
        apt-get install -y --no-install-recommends python3 python3-pip python3-dev python3-wheel

    - name: Link python3
      working-directory: /usr/local/bin
      run: |-
        ln -s /usr/bin/python3 python
        ln -s /usr/bin/pip3 pip

    - name: Install TensorRT
      run: |
        if [ "${CUDA_VERSION}" = "10.2" ] ; then \
            v="${TRT_VERSION%.*}-1+cuda${CUDA_VERSION}" &&\
            apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub &&\
            apt-get update &&\
            sudo apt-get install -y libnvinfer8=${v} libnvonnxparsers8=${v} libnvparsers8=${v} libnvinfer-plugin8=${v} \
                libnvinfer-dev=${v} libnvonnxparsers-dev=${v} libnvparsers-dev=${v} libnvinfer-plugin-dev=${v} \
                python3-libnvinfer=${v}; \
        else \
            v="${TRT_VERSION%.*}-1+cuda${CUDA_VERSION%.*}" &&\
            apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub &&\
            apt-get update &&\
            sudo apt-get install -y libnvinfer8=${v} libnvonnxparsers8=${v} libnvparsers8=${v} libnvinfer-plugin8=${v} \
                libnvinfer-dev=${v} libnvonnxparsers-dev=${v} libnvparsers-dev=${v} libnvinfer-plugin-dev=${v} \
                python3-libnvinfer=${v}; \
        fi

    - name: Install PyPI packages
      run: |-
        pip3 install --upgrade pip
        pip3 install setuptools>=41.0.0
        pip3 install -r requirements.txt
        pip3 install jupyter jupyterlab
        # Workaround to remove numpy installed with tensorflow
        pip3 install --upgrade numpy

    - name: Install Cmake
      working-directory: /tmp
      run: |-
        wget -q https://github.com/Kitware/CMake/releases/download/v3.14.4/cmake-3.14.4-Linux-x86_64.sh
        chmod +x cmake-3.14.4-Linux-x86_64.sh
        ./cmake-3.14.4-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir --skip-license
        rm ./cmake-3.14.4-Linux-x86_64.sh

    - name: Download NGC client
      working-directory: /usr/local/bin
      run: |-
        wget -q https://ngc.nvidia.com/downloads/ngccli_cat_linux.zip
        unzip ngccli_cat_linux.zip
        chmod u+x ngc-cli/ngc
        rm ngccli_cat_linux.zip ngc-cli.md5 
        echo "no-apikey\nascii\n" | ngc-cli/ngc config set
        export PATH="${PATH}:/usr/local/bin/ngc-cli"

    - name: Set LD_LIBRARY_PATH
      run: |-
        export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${TRT_OSSPATH}/build/out:${TRT_LIBPATH}"
        
    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        queries: +security-and-quality

    - name: Build
      working-directory: /__w/TensorRT/TensorRT
      run: |-
        mkdir -p build && cd build
        cmake .. -DTRT_LIB_DIR=$TRT_LIBPATH -DTRT_OUT_DIR=`pwd`/out
        make -j $(nproc)

    # Free space
    - name: Uninstall TensorRT
      run: |
        if [ "${CUDA_VERSION}" = "10.2" ] ; then \
            v="${TRT_VERSION%.*}-1+cuda${CUDA_VERSION}" &&\
            sudo apt-get remove -y libnvinfer8=${v} libnvonnxparsers8=${v} libnvparsers8=${v} libnvinfer-plugin8=${v} \
                libnvinfer-dev=${v} libnvonnxparsers-dev=${v} libnvparsers-dev=${v} libnvinfer-plugin-dev=${v} \
                python3-libnvinfer=${v}; \
        else \
            v="${TRT_VERSION%.*}-1+cuda${CUDA_VERSION%.*}" &&\
            sudo apt-get remove -y libnvinfer8=${v} libnvonnxparsers8=${v} libnvparsers8=${v} libnvinfer-plugin8=${v} \
                libnvinfer-dev=${v} libnvonnxparsers-dev=${v} libnvparsers-dev=${v} libnvinfer-plugin-dev=${v} \
                python3-libnvinfer=${v}; \
        fi

    - name: Uninstall PyPI packages
      run: |-
        pip3 uninstall --upgrade pip
        pip3 uninstall setuptools>=41.0.0
        pip3 uninstall -r requirements.txt
        pip3 uninstall jupyter jupyterlab
        pip3 uninstall --upgrade numpy

    - name: Remove NGC client
      run: rm -rf /usr/local/bin/ngc-cli"

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"